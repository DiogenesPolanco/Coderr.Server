<div>
    <h1>ASP.NET</h1>
    <p>
        This package will automatically catch all unhandled exceptions in ASP.NET applications. It will also adopt the HTTP response according to the HTTP accept header in the request. That means that OneTrueError
        will work well even with REST applications based on JSON or XML.
    </p>
    <p>
        The package also automatically includes information about the HTTP request, session etc.
    </p>
    <h3>Package install</h3>
        Install the following nuget package <a target="_blank" href="http://www.nuget.org/packages/OneTrueError.aspnet/">onetrueerror.aspnet</a>
        <pre><code>install-package onetrueerror.aspnet</code></pre>
    <h3>Configuration</h3>
    <div>
        <p>Copy/paste the code below to your application. The correct appkey/sharedSecret have been specified.</p>
        <!-- HTML generated using hilite.me -->
        <div style="background: #ffffff; overflow: auto; width: auto; padding: .2em .6em;">
            <pre style="margin: 0; line-height: 125%"><span style="color: #000080; font-weight: bold">public</span> <span style="color: #000080; font-weight: bold">class</span> WebApiApplication : System.Web.HttpApplication
{
            <span style="color: #000080; font-weight: bold">protected</span> <span style="color: #000080; font-weight: bold">void</span> Application_Start()
    {
            <span style="color: #008800; font-style: italic">// The appkey and shared key can be found in onetrueeror.com</span>
        OneTrue.Configuration.Credentials(<span style="color: #0000FF">&quot;<span data-name="AppKey"></span>&quot;</span>, 
            <span style="color: #0000FF">&quot;<span data-name="SharedSecret"></span>&quot;</span>);
        OneTrue.Configuration.CatchAspNetExceptions();
    }
}
</pre>
        </div>
        <p>That will automatically catch all uncaught exceptions and display an error page for the user.</p>
        <p>
            The exception(s) will be enqueued and uploaded to our service as soon as an internet connection is available. That also means that no error reports are lost even if
            the application crashes before the report has been uploaded. The library will continue it's upload attempts next time the application is started.
        </p>
    </div>
    <h3>Reporting errors manually</h3>
    <div>
        <p>You can also report errors you need to invoke the report method:</p>
        <!-- HTML generated using hilite.me -->
        <div style="background: #ffffff; overflow: auto; width: auto; padding: .2em .6em;">
            <pre style="margin: 0; line-height: 125%"><span style="color: #000080; font-weight: bold">public</span> ActionResult Activate(UserViewModel model)
{
            <span style="color: #000080; font-weight: bold">if</span> (!ModelState.IsValid)
            <span style="color: #000080; font-weight: bold">return</span> View(model);
            <span style="color: #000080; font-weight: bold">try</span>
    {
            <span style="color: #000080; font-weight: bold">var</span> user = _repos.GetUser(model.Id);
        user.Activate(model.ActicationCode);
        _repos.Save(user);
            <span style="color: #000080; font-weight: bold">return</span> RedirectToAction(<span style="color: #0000FF">&quot;Welcome&quot;</span>);
    }
            <span style="color: #000080; font-weight: bold">catch</span> (Exception exception)
    {
        OneTrue.Report(exception);
    }
}
</pre>
        </div>


        <p>
            All report methods are documented <a target="_blank" href="http://onetrueerror.com/doc/client/?topic=html/Methods_T_OneTrueError_Reporting_OneTrue.htm">here</a>. Do note the support
            for two-step-reporting which work well with stateless protocols like HTTP.
        </p>

    </div>
    <h3>Error pages</h3>
    <div>
        <p>
            Unlike <code>&lt;customErrors&gt;</code> in ASP.NET we do not use redirection or similar. You do instead point on a ASPX page which will be used to show an error page (and collect additional information). A default page
            will be used if none is configured.
        </p>
        <p>
            Sample configuration:
            <!-- HTML generated using hilite.me -->
            <div style="background: #ffffff; overflow: auto; width: auto; padding: .2em .6em;">
                <pre style="margin: 0; line-height: 125%">OneTrue.Configuration.SetErrorPage(<span style="color: #0000FF">&quot;~/views/error.aspx&quot;</span>);
</pre>
            </div>

        </p>
        <p>As an alternative you can configure a factory to produce different error pages for different errors. Refer to the documentation which is listed below for further information.</p>
    </div>
    <h3>Documentation</h3>
    <p>The complete documentation for the ASP.NET library is <a target="_blank" href="http://onetrueerror.com/doc/client/?topic=html/N_OneTrueError_Reporting_AspNet.htm">available here.</a>
    </p>
</div>
