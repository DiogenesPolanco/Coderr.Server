using System;
using System.Threading;
using System.Threading.Tasks;
using DotNetCqs;
using Griffin.Container;
using log4net;
<<<<<<< HEAD
using OneTrueError.AccountManagement.App.Customers;
using OneTrueError.Api.Core.Accounts;
using OneTrueError.Api.Core.Accounts.Events;
using OneTrueError.Api.Core.Accounts.Requests;
using OneTrueError.App;

namespace OneTrueError.AccountManagement.App.Accounts.Requests
{
    /// <summary>
    /// Aktivera konto
    /// </summary>
    /// <remarks>
    /// Will also create an organization if the specified organization name is available
    /// </remarks>
    [Component]
    public class ActivateAccountHandler : IRequestHandler<ActivateAccount, ActivateAccountReply>
    {
        private readonly IAccountRepository _repository;
        private readonly ICustomerRepository _customerRepository;
        private readonly IEventBus _eventBus;
        private ILog _logger = LogManager.GetLogger(typeof(ActivateAccountHandler));

        public ActivateAccountHandler(IAccountRepository repository,
            ICustomerRepository customerRepository,
            IEventBus eventBus)
        {
            _repository = repository;
            _customerRepository = customerRepository;
=======
using OneTrueError.Api.Core.Accounts.Events;
using OneTrueError.Api.Core.Accounts.Requests;

namespace OneTrueError.App.Core.Accounts.Requests
{
    /// <summary>
    ///     Handler for <see cref="ActivateAccount"/>.
    /// </summary>
    [Component]
    public class ActivateAccountHandler : IRequestHandler<ActivateAccount, ActivateAccountReply>
    {
        private readonly IEventBus _eventBus;
        private readonly IAccountRepository _repository;
        private ILog _logger = LogManager.GetLogger(typeof (ActivateAccountHandler));

        public ActivateAccountHandler(IAccountRepository repository, IEventBus eventBus)
        {
            _repository = repository;
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
            _eventBus = eventBus;
        }

        public async Task<ActivateAccountReply> ExecuteAsync(ActivateAccount command)
        {
<<<<<<< HEAD
            Account account = _repository.FindByActivationKey(command.ActivationKey);
            if (account == null)
                throw new ArgumentOutOfRangeException("command.ActivationKey", command.ActivationKey, "Key was not found.");

            var pos = account.Email.IndexOf('@');
            var dot = account.Email.IndexOf('.', pos);
            var customerName = account.Email.Substring(pos + 1, dot - pos - 1);
            if (_customerRepository.Exists(customerName))
            {
                _logger.Warn("Exists: " + customerName);
                customerName = account.UserName;
            }

            var customer = new Customer(new AccountLink(account.Id, account.UserName), customerName);
            await _customerRepository.CreateAsync(customer);
            account.CustomerId = customer.Id;
            account.Activate();
            Thread.CurrentPrincipal = new OneTruePrincipal(customer.Id, account.UserName);
            await _repository.UpdateAsync(account);

            var evt = new AccountActivated(account.Id, account.UserName, account.PromotionCode, customer.Id)
=======
            var account = _repository.FindByActivationKey(command.ActivationKey);
            if (account == null)
                throw new ArgumentOutOfRangeException("ActivationKey", command.ActivationKey,
                    "Key was not found.");

            account.Activate();
            await _repository.UpdateAsync(account);

            Thread.CurrentPrincipal = new OneTruePrincipal(0, account.UserName);
            var evt = new AccountActivated(account.Id, account.UserName)
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
            {
                EmailAddress = account.Email
            };
            await _eventBus.PublishAsync(evt);

            return new ActivateAccountReply
            {
                AccountId = account.Id,
<<<<<<< HEAD
                CustomerName = customer.Name,
                CustomerId = customer.Id,
=======
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
                IsOnTrial = true,
                TrialDaysLeft = 14,
                UserName = account.UserName
            };
        }
<<<<<<< HEAD

=======
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
    }
}