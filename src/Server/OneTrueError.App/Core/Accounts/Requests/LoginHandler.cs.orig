using System.Security.Authentication;
using System.Threading.Tasks;
using DotNetCqs;
using Griffin.Container;
using log4net;
<<<<<<< HEAD
using OneTrueError.AccountManagement.App.Customers;
using OneTrueError.Api.Core.Accounts.Events;
using OneTrueError.Api.Core.Accounts.Requests;

namespace OneTrueError.AccountManagement.App.Accounts.Requests
{
=======
using OneTrueError.Api.Core.Accounts.Events;
using OneTrueError.Api.Core.Accounts.Requests;

namespace OneTrueError.App.Core.Accounts.Requests
{
    /// <summary>
    /// Handler for <see cref="Login"/>.
    /// </summary>
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
    [Component]
    public class LoginHandler : IRequestHandler<Login, LoginReply>
    {
        private readonly IEventBus _eventBus;
        private readonly IAccountRepository _repository;
<<<<<<< HEAD
        private readonly ICustomerRepository _customerRepository;
        private ILog _logger = LogManager.GetLogger(typeof(LoginHandler));

        public LoginHandler(IAccountRepository repository, ICustomerRepository customerRepository, IEventBus eventBus)
        {
            _repository = repository;
            _customerRepository = customerRepository;
=======
        private ILog _logger = LogManager.GetLogger(typeof(LoginHandler));

        public LoginHandler(IAccountRepository repository, IEventBus eventBus)
        {
            _repository = repository;
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
            _eventBus = eventBus;
        }

        public async Task<LoginReply> ExecuteAsync(Login request)
        {
            var user = await _repository.FindByUsernameAsync(request.UserName);

            try
            {
                if (user == null || !user.Login(request.Password))
                {
                    _logger.Info("Failed to find user " + request.UserName);
                    await _eventBus.PublishAsync(new LoginFailed(request.UserName) { InvalidLogin = true });
                    _logger.Info("Replying for " + request.UserName);
                    return new LoginReply { Result = LoginResult.IncorrectLogin };
                }
            }
            catch (AuthenticationException exception)
            {
                _logger.Error("Could not login " + request.UserName, exception);

                //no await is intentional
#pragma warning disable 4014
                _eventBus.PublishAsync(new LoginFailed(request.UserName) { IsLocked = true });
#pragma warning restore 4014

                return new LoginReply { Result = LoginResult.Locked };
            }

            await _repository.LoggedInAsync(request.UserName);
            _logger.Info("Logged in " + request.UserName);
<<<<<<< HEAD
            var customer = await _customerRepository.GetByIdAsync(user.CustomerId);
=======
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
            return new LoginReply
            {
                Result = LoginResult.Successful,
                UserName = user.UserName,
<<<<<<< HEAD
                AccountId = user.Id,
                IsOnTrial = !customer.HasTrialExpired,
                TrialDaysLeft = customer.DaysUntilTrialExpires,
                CustomerId = customer.Id,
                CustomerName = customer.Name
=======
                AccountId = user.Id
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
            };
        }
    }
}