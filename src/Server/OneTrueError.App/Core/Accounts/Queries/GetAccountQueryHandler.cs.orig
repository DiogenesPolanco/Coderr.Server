using System;
using System.Threading.Tasks;
using DotNetCqs;
using Griffin.Container;
using OneTrueError.Api.Core.Accounts.Queries;

<<<<<<< HEAD
namespace OneTrueError.AccountManagement.App.Accounts.Queries
=======
namespace OneTrueError.App.Core.Accounts.Queries
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
{
    [Component]
    public class GetAccountQueryHandler : IQueryHandler<GetAccountById, AccountDTO>
    {
        private IAccountRepository _repository;

        public GetAccountQueryHandler(IAccountRepository repository)
        {
            _repository = repository;
        }

        public async Task<AccountDTO> ExecuteAsync(GetAccountById query)
        {
            var account = await _repository.GetByIdAsync(query.AccountId);
            if (account == null)
                return null;

            var dto = new AccountDTO()
            {
                CreatedAtUtc = account.CreatedAtUtc,
                Email = account.Email,
                Id = account.Id,
                LastLoginAtUtc = account.LastLoginAtUtc,
<<<<<<< HEAD
                PromotionCode = account.PromotionCode,
=======
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
                State = (AccountState)Enum.Parse(typeof(AccountState), account.AccountState.ToString()),
                UpdatedAtUtc = account.UpdatedAtUtc,
                UserName = account.UserName
            };

            return dto;
        }
    }
}
