using System.Collections.Generic;
using System.Threading.Tasks;

<<<<<<< HEAD
namespace OneTrueError.AccountManagement.App.Accounts
=======
namespace OneTrueError.App.Core.Accounts
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
{
    public interface IAccountRepository
    {
        Task CreateAsync(Account account);
        Account FindByEmail(string emailAddress);
        Task<Account> FindByUsernameAsync(string userName);
        Account FindByActivationKey(string activationKey);
        Task<Account> GetByIdAsync(int id);
        IEnumerable<Account> GetById(int[] ids);
<<<<<<< HEAD
        bool IsEmailAddressTaken(string email);
        bool IsUserNameTaken(string userName);
        Task LoggedInAsync(string userName);
=======

        /// <summary>
        /// Check if email address is taken
        /// </summary>
        /// <param name="email">email</param>
        /// <returns><c>true</c> if it exists; otherwise <c>false</c>.</returns>
        bool IsEmailAddressTaken(string email);


        /// <summary>
        /// Check if username is already taken.
        /// </summary>
        /// <param name="userName">Username</param>
        /// <returns><c>true</c> if it exists; otherwise <c>false</c>.</returns>
        bool IsUserNameTaken(string userName);

        /// <summary>
        /// Mark user as logged in.
        /// </summary>
        /// <param name="userName">Username</param>
        /// <returns>task</returns>
        Task LoggedInAsync(string userName);

>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
        Task UpdateAsync(Account account);
        Account GetByUserName(string userName);
    }
}