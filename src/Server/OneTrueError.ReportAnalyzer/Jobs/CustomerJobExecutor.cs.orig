using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Threading;
using Griffin.ApplicationServices;
using Griffin.Container;
using Griffin.Data;
using log4net;
using OneTrueError.SqlServer.Tools;

namespace OneTrueError.ReportAnalyzer.CustomerJobs
{
    [Component(Lifetime = Lifetime.Singleton)]
    public class CustomerJobExecutor : ApplicationServiceTimer
    {
        private readonly IContainer _container;
        private readonly ILog _logger = LogManager.GetLogger(typeof (CustomerJobExecutor));
        private readonly IScopedTaskInvoker _taskInvoker;

        public CustomerJobExecutor(IScopedTaskInvoker taskInvoker, IContainer container)
        {
            _taskInvoker = taskInvoker;
            _container = container;
        }

        private IReadOnlyList<int> GetCustomerIds()
        {
<<<<<<< HEAD
            //using (var uow = new GlobalUnitOfWork())
            //using (var cmd = uow.CreateCommand())
            //{
            //    cmd.CommandText = "SELECT Id FROM Customers";
            //    using (var reader = cmd.ExecuteReader())
            //    {
            //        var ids = new List<int>();
            //        while (reader.Read())
            //        {
            //            ids.Add(reader.GetInt32(0));
            //        }
            //        return ids;
            //    }
            //}
            throw new NotImplementedException();
=======
            var con = new SqlConnection(ConfigurationManager.ConnectionStrings["Db"].ConnectionString);
            con.Open();
            using (var uow = new AdoNetUnitOfWork(con))
            using (var cmd = uow.CreateCommand())
            {
                cmd.CommandText = "SELECT Id FROM Customers";
                using (var reader = cmd.ExecuteReader())
                {
                    var ids = new List<int>();
                    while (reader.Read())
                    {
                        ids.Add(reader.GetInt32(0));
                    }
                    return ids;
                }
            }
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
        }

        protected override void Execute()
        {
            var customerIds = GetCustomerIds();
            foreach (var customerId in customerIds)
            {
                try
                {
                    ExecuteCustomerJob(customerId);
                }
                catch (Exception ex)
                {
                    _logger.Error("Failed to execute jobs for customerId " + customerId, ex);
                }
            }
        }

        private void ExecuteCustomerJob(int customerId)
        {
<<<<<<< HEAD
            var principal = new ReportAnalyzerPrincipal(customerId, "system");
=======
            var principal = new OneTruePrincipal(customerId, "system");
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
            Thread.CurrentPrincipal = principal;
            using (var scope = _container.CreateScope())
            {
                var jobs = scope.ResolveAll<ICustomerJob>();
                foreach (var job in jobs)
                {
                    job.Execute();
                }

                scope.Resolve<IAdoNetUnitOfWork>().SaveChanges();
            }
        }
    }
}