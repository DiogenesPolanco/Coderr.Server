using System.Configuration;
using System.Threading.Tasks;
using DotNetCqs;
using Griffin.Container;
<<<<<<< HEAD
using OneTrueError.AccountManagement.Api.Messaging;
using OneTrueError.AccountManagement.Api.Messaging.Commands;
using OneTrueError.Api.Core.Accounts.Commands;
using OneTrueError.Api.Core.Accounts.Events;

namespace OneTrueError.AccountManagement.App.Accounts.CommandHandlers
{
    /// <summary>
    ///     Regga nytt konto, skicka ut
=======
using OneTrueError.Api.Core.Accounts.Commands;
using OneTrueError.Api.Core.Accounts.Events;
using OneTrueError.Api.Core.Messaging;
using OneTrueError.Api.Core.Messaging.Commands;

namespace OneTrueError.App.Core.Accounts.CommandHandlers
{
    /// <summary>
    ///     Register a new account.
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
    /// </summary>
    [Component]
    public class RegisterAccountHandler : ICommandHandler<RegisterAccount>
    {
        private readonly ICommandBus _commandBus;
        private readonly IEventBus _eventBus;
        private readonly IAccountRepository _repository;
<<<<<<< HEAD
        //private readonly IIdGeneratorClient _idGeneratorClient;
=======
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915

        public RegisterAccountHandler(IAccountRepository repository, ICommandBus commandBus, IEventBus eventBus)
        {
            _repository = repository;
<<<<<<< HEAD
            //_idGeneratorClient = idGeneratorClient;
=======
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
            _commandBus = commandBus;
            _eventBus = eventBus;
        }

        public async Task ExecuteAsync(RegisterAccount command)
        {
<<<<<<< HEAD
            //var id = _idGeneratorClient.GetNextId(Account.SEQUENCE);
            var account = new Account(command.UserName, command.Password);
            account.SetVerifiedEmail(command.Email);
            account.PromotionCode = command.PromotionCode;
            account.TrackingId = command.TrackingCookie;
            await _repository.CreateAsync(account);
            await SendVerificationEmail(account);
            var evt = new AccountRegistered(account.Id, account.UserName, account.PromotionCode);
=======
            var account = new Account(command.UserName, command.Password);
            account.SetVerifiedEmail(command.Email);
            await _repository.CreateAsync(account);
            await SendVerificationEmail(account);
            var evt = new AccountRegistered(account.Id, account.UserName);
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
            await _eventBus.PublishAsync(evt);
        }

        private Task SendVerificationEmail(Account account)
        {
            //TODO: HTML email
            var msg = new EmailMessage
                {
                    TextBody = string.Format(@"Welcome,


Your activation code is: {0}

You can activate your account by clicking on: {1}/account/activate/{0}

Good luck,
  OneTrueError Team", account.ActivationKey, ConfigurationManager.AppSettings["AppUrl"]),
                    Subject = "OneTrueError activation"
                };
            msg.Recipients = new []{new EmailAddress(account.Email)};

            return _commandBus.ExecuteAsync(new SendEmail(msg));
        }
    }
}