using System;
using System.Configuration;
using System.Threading.Tasks;
using DotNetCqs;
using Griffin.Container;
using log4net;
<<<<<<< HEAD
using OneTrueError.AccountManagement.Api.Messaging;
using OneTrueError.AccountManagement.Api.Messaging.Commands;
using OneTrueError.Api.Core.Accounts;
using OneTrueError.Api.Core.Accounts.Commands;
using OneTrueError.Api.Core.Accounts.Events;

namespace OneTrueError.AccountManagement.App.Accounts.CommandHandlers
{
=======
using OneTrueError.Api.Core.Accounts;
using OneTrueError.Api.Core.Accounts.Commands;
using OneTrueError.Api.Core.Accounts.Events;
using OneTrueError.Api.Core.Messaging;
using OneTrueError.Api.Core.Messaging.Commands;

namespace OneTrueError.App.Core.Accounts.CommandHandlers
{
    /// <summary>
    ///     Handler for <see cref="RegisterSimple" />.
    /// </summary>
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
    [Component]
    internal class RegisterSimpleHandler : ICommandHandler<RegisterSimple>
    {
        private readonly ICommandBus _commandBus;
        private readonly IEventBus _eventBus;
        private readonly ILog _logger = LogManager.GetLogger(typeof (RegisterSimpleHandler));
        private readonly IAccountRepository _repository;

        public RegisterSimpleHandler(IAccountRepository repository, ICommandBus commandBus, IEventBus eventBus)
        {
            _repository = repository;
            _commandBus = commandBus;
            _eventBus = eventBus;
        }

        public async Task ExecuteAsync(RegisterSimple command)
        {
            var pos = command.EmailAddress.IndexOf('@');
            if (pos == -1)
            {
                _logger.Warn("Invalid email address: " + command.EmailAddress);
                throw new InvalidOperationException("Invalid email address");
            }

            var user = _repository.FindByEmail(command.EmailAddress);
            if (user != null)
            {
                _logger.Warn("Email already taken, sending reset password: " + command.EmailAddress);
                await _commandBus.ExecuteAsync(new RequestPasswordReset(command.EmailAddress));
            }

            string userName;
            if (!TryCreateUsername(command, pos, out userName))
            {
<<<<<<< HEAD
                _logger.Error("Failed to generate username for "  + command.EmailAddress);
=======
                _logger.Error("Failed to generate username for " + command.EmailAddress);
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
                return;
            }


            //var id = _idGeneratorClient.GetNextId(Account.SEQUENCE);
            var password = Guid.NewGuid().ToString("N").Substring(0, 10);
            var account = new Account(userName, password);
            account.SetVerifiedEmail(command.EmailAddress);
<<<<<<< HEAD
            account.TrackingId = command.TrackingId;
=======
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
            await _repository.CreateAsync(account);

            await SendAccountEmail(account, password);

<<<<<<< HEAD
            var evt = new AccountRegistered(account.Id, account.UserName, account.PromotionCode);
=======
            var evt = new AccountRegistered(account.Id, account.UserName);
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915
            await _eventBus.PublishAsync(evt);
        }

        private bool TryCreateUsername(RegisterSimple command, int pos, out string userName)
        {
            userName = command.EmailAddress.Substring(0, pos);
            if (!_repository.IsUserNameTaken(userName))
                return true;

            var counter = 100;
            var newUserName = userName + counter;
            while (counter < 110)
            {
                if (!_repository.IsUserNameTaken(newUserName))
                {
                    userName = newUserName;
                    return true;
                }

                counter++;
                newUserName = userName + counter;
            }

            _logger.Error("Failed to generate userName: " + userName);
            return false;
        }

        private Task SendAccountEmail(Account account, string password)
        {
            //TODO: HTML email
            var msg = new EmailMessage
            {
                TextBody = string.Format(@"Welcome,


We have created your account.

UserName: {1}
Password: {2}

You can login using {0}/account/activate/{3}.

<<<<<<< HEAD
We recommend that you change your password before activating a paid subscription.
=======
We recommend that you change your password before doing something useful.
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915

Thanks,
  The OneTrueError Team", ConfigurationManager.AppSettings["AppUrl"], account.UserName, password, account.ActivationKey),
                Subject = "OneTrueError activation"
            };
<<<<<<< HEAD
            msg.Recipients = new []{new EmailAddress(account.Email)};
=======
            msg.Recipients = new[] {new EmailAddress(account.Email)};
>>>>>>> 1f85023bc3bc0d14087f34d7c3c2906831d91915

            return _commandBus.ExecuteAsync(new SendEmail(msg));
        }
    }
}